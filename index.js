// https://eslint.org/docs/rules/#possible-errors
const possibleErrors = {
    "for-direction": "error",
    "getter-return": ["error", { "allowImplicit": true }],
    "no-async-promise-executor": "off",
    "no-await-in-loop": "off",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-console": "error",
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-dupe-args": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": ["error", "functions"],
    "no-extra-semi": "error",
    "no-func-assign": "error",
    "no-inner-declarations": ["error", "functions"],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-misleading-character-class": "error",
    "no-obj-calls": "error",
    // sinon has this solution: https://github.com/sinonjs/commons/tree/master/lib/prototypes
    "no-prototype-builtins": "off",
    "no-regex-spaces": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "off",
    "no-unexpected-multiline": "error",
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "require-atomic-updates": "off",
    "use-isnan": "error",
    "valid-jsdoc": "error",
    "valid-typeof": "error",
}

// https://eslint.org/docs/rules/#best-practices
const bestPractices = {
    "accessor-pairs": "error",
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "class-methods-use-this": "off",
    "complexity": ["error", 18],
    "consistent-return": "error",
    "curly": ["error", "all"],
    "default-case": "error",
    "dot-location": ["error", "property"],
    "dot-notation": ["error", { "allowKeywords": true }],
    "eqeqeq": ["error", "allow-null"],
    "guard-for-in": "error",
    "max-classes-per-file": "off",
    "no-alert": "error",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-div-regex": "error",
    "no-else-return": "error",
    "no-empty-function": "error",
    "no-empty-pattern": "off",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": "error",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-param-reassign": "error",
    "no-proto": "error",
    "no-redeclare": "error",
    "no-restricted-properties": "error",
    "no-return-assign": "error",
    "no-return-await": "off",
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "error",
    "no-unused-expressions": "error",
    "no-unused-labels": "error",
    "no-useless-call": "error",
    "no-useless-concat": "error",
    "no-useless-escape": "error",
    "no-useless-return": "off",
    "no-void": "error",
    "no-warning-comments": ["error", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
    "no-with": "error",
    "prefer-promise-reject-errors": "off",
    "radix": "off",
    "require-await": "off",
    "require-unicode-regexp": "off",
    "vars-on-top": "off",
    "wrap-iife": "error",
    "yoda": ["error", "never"]
}

// https://eslint.org/docs/rules/#strict-mode
const strictMode = {
    "strict": ["error", "global"]
}

// https://eslint.org/docs/rules/#variables
const variables = {
    "init-declarations": "off",
    "no-delete-var": "error",
    "no-label-var": "error",
    "no-restricted-globals": "off",
    "no-shadow": "error",
    "no-shadow-restricted-names": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-unused-vars": ["error", {"vars": "all", "args": "after-used"}],
    "no-use-before-define": "error",
}

// https://eslint.org/docs/rules/#nodejs-and-commonjs
const nodeAndCommonJS = {
    "callback-return": "off",
    "global-require": "off",
    "handle-callback-err": "off",
    "no-buffer-constructor": "off",
    "no-mixed-requires": ["off", false],
    "no-new-require": "off",
    "no-path-concat": "off",
    "no-process-env": "off",
    "no-process-exit": "error",
    "no-restricted-modules": "off",
    "no-sync": "off",
}

// https://eslint.org/docs/rules/#stylistic-issues
const stylisticIssues = {
    "array-bracket-newline": "off",
    "array-bracket-spacing": ["error", "never"],
    "array-element-newline": "off",
    "block-spacing": "off",
    "brace-style": ["off", "1tbs"],
    "camelcase": "error",
    "capitalized-comments": "off",
    "comma-dangle": ["error", "never"],
    "comma-spacing": "error",
    "comma-style": "error",
    "computed-property-spacing": ["off", "never"],
    "consistent-this": ["off", "that"],
    "eol-last": "error",
    "func-call-spacing": "error",
    "func-name-matching": "off",
    "func-names": "off",
    "func-style": ["off", "declaration"],
    "function-paren-newline": "off",
    "id-blacklist": "off",
    "id-length": "off",
    "id-match": "off",
    "implicit-arrow-linebreak": "off",
    "indent": ["error", 4, {"SwitchCase": 1}],
    "jsx-quotes": "off",
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "keyword-spacing": ["error", { "after": true }],
    "line-comment-position": "off",
    "linebreak-style": ["off", "unix"],
    "lines-around-comment": "off",
    "lines-between-class-members": "off",
    "max-depth": ["off", 4],
    "max-len": ["error", 120, 4],
    "max-lines": "off",
    "max-lines-per-function": "off",
    "max-nested-callbacks": ["warn", 2],
    "max-params": ["off", 3],
    "max-statements": ["off", 10],
    "max-statements-per-line": "off",
    "multiline-comment-style": "off",
    "multiline-ternary": "off",
    "new-cap": "error",
    "new-parens": "error",
    "newline-per-chained-call": "off",
    "no-array-constructor": "error",
    "no-bitwise": "error",
    "no-continue": "error",
    "no-inline-comments": "off",
    "no-lonely-if": "off",
    "no-mixed-operators": "off",
    "no-mixed-spaces-and-tabs": ["error", false],
    "no-multi-assign": "off",
    "no-multiple-empty-lines": ["error", {"max": 2}],
    "no-negated-condition": "off",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-plusplus": "off",
    "no-restricted-syntax": "off",
    "no-tabs": "off",
    "no-ternary": "off",
    "no-trailing-spaces": "error",
    "no-underscore-dangle": "error",
    "no-unneeded-ternary": "off",
    "no-whitespace-before-property": "off",
    "nonblock-statement-body-position": "off",
    "object-curly-newline": "off",
    "object-curly-spacing": ["off", "never"],
    "object-property-newline": "off",
    "one-var": ["error", {
         // Exactly one declaration for uninitialized variables per function (var) or block (let or const)
        "uninitialized": "always",
         // Exactly one declarator per initialized variable declaration per function (var) or block (let or const)
        "initialized": "never"
    }],
    "one-var-declaration-per-line": "off",
    "operator-assignment": ["off", "always"],
    "operator-linebreak": "off",
    "padded-blocks": "off",
    "padding-line-between-statements": "off",
    "prefer-object-spread": "off",
    "quote-props": "off",
    "quotes": ["error", "double"],
    "require-jsdoc": "off",
    "semi": "error",
    "semi-spacing": ["error", {"before": false, "after": true}],
    "semi-style": "off",
    "sort-keys": "off",
    "sort-vars": "off",
    "space-before-blocks": ["error", "always"],
    "space-before-function-paren": ["error", {"anonymous": "always", "named": "never"}],
    "space-in-parens": ["off", "never"],
    "space-infix-ops": "error",
    "space-unary-ops": ["error", { "words": true, "nonwords": false }],
    "spaced-comment": "off",
    "switch-colon-spacing": "off",
    "template-tag-spacing": "off",
    "unicode-bom": "off",
    "wrap-regex": "off"
}

// https://eslint.org/docs/rules/#ecmascript-6
const ecmaScript6 = {
    "arrow-body-style": "off",
    "arrow-parens": "off",
    "arrow-spacing": "off",
    "constructor-super": "off",
    "generator-star-spacing": "off",
    "no-class-assign": "off",
    "no-confusing-arrow": "off",
    "no-const-assign": "off",
    "no-dupe-class-members": "off",
    "no-duplicate-imports": "off",
    "no-new-symbol": "off",
    "no-restricted-imports": "off",
    "no-this-before-super": "off",
    "no-useless-computed-key": "off",
    "no-useless-constructor": "off",
    "no-useless-rename": "off",
    "no-var": 0,
    "object-shorthand": 0,
    "prefer-arrow-callback": "off",
    "prefer-const": 0,
    "prefer-destructuring": "off",
    "prefer-numeric-literals": "off",
    "prefer-rest-params": "off",
    "prefer-spread": "off",
    "prefer-template": "off",
    "require-yield": 0,
    "rest-spread-spacing": "off",
    "sort-imports": "off",
    "symbol-description": "off",
    "template-curly-spacing": "off",
    "yield-star-spacing": "off"
}

module.exports = {
    "env": {
        "browser": true,
        "node": true,
        "amd": true,
        "es6": false
    },
    "parserOptions": {
        "ecmaVersion": 5,
        "ecmaFeatures": {},
    },
    "rules": Object.assign(
        {},
        possibleErrors,
        bestPractices,
        strictMode,
        variables,
        stylisticIssues,
        ecmaScript6
    )
}
